//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_Profiling_ProfilerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Profiling.Profiler), typeof(System.Object));
		L.RegFunction("AddFramesFromFile", AddFramesFromFile);
		L.RegFunction("BeginThreadProfiling", BeginThreadProfiling);
		L.RegFunction("EndThreadProfiling", EndThreadProfiling);
		L.RegFunction("BeginSample", BeginSample);
		L.RegFunction("EndSample", EndSample);
		L.RegFunction("GetRuntimeMemorySizeLong", GetRuntimeMemorySizeLong);
		L.RegFunction("GetMonoHeapSizeLong", GetMonoHeapSizeLong);
		L.RegFunction("GetMonoUsedSizeLong", GetMonoUsedSizeLong);
		L.RegFunction("SetTempAllocatorRequestedSize", SetTempAllocatorRequestedSize);
		L.RegFunction("GetTempAllocatorSize", GetTempAllocatorSize);
		L.RegFunction("GetTotalAllocatedMemoryLong", GetTotalAllocatedMemoryLong);
		L.RegFunction("GetTotalUnusedReservedMemoryLong", GetTotalUnusedReservedMemoryLong);
		L.RegFunction("GetTotalReservedMemoryLong", GetTotalReservedMemoryLong);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("supported", get_supported, null);
		L.RegVar("logFile", get_logFile, set_logFile);
		L.RegVar("enableBinaryLog", get_enableBinaryLog, set_enableBinaryLog);
		L.RegVar("enabled", get_enabled, set_enabled);
		L.RegVar("usedHeapSizeLong", get_usedHeapSizeLong, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddFramesFromFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Profiling.Profiler.AddFramesFromFile(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginThreadProfiling(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			UnityEngine.Profiling.Profiler.BeginThreadProfiling(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndThreadProfiling(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.Profiling.Profiler.EndThreadProfiling();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginSample(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Profiling.Profiler.BeginSample(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 2);
				UnityEngine.Profiling.Profiler.BeginSample(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Profiling.Profiler.BeginSample");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndSample(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.Profiling.Profiler.EndSample();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRuntimeMemorySizeLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			long o = UnityEngine.Profiling.Profiler.GetRuntimeMemorySizeLong(arg0);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMonoHeapSizeLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			long o = UnityEngine.Profiling.Profiler.GetMonoHeapSizeLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMonoUsedSizeLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			long o = UnityEngine.Profiling.Profiler.GetMonoUsedSizeLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTempAllocatorRequestedSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 1);
			bool o = UnityEngine.Profiling.Profiler.SetTempAllocatorRequestedSize(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTempAllocatorSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			uint o = UnityEngine.Profiling.Profiler.GetTempAllocatorSize();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTotalAllocatedMemoryLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			long o = UnityEngine.Profiling.Profiler.GetTotalAllocatedMemoryLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTotalUnusedReservedMemoryLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			long o = UnityEngine.Profiling.Profiler.GetTotalUnusedReservedMemoryLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTotalReservedMemoryLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			long o = UnityEngine.Profiling.Profiler.GetTotalReservedMemoryLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supported(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Profiling.Profiler.supported);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_logFile(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, UnityEngine.Profiling.Profiler.logFile);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableBinaryLog(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Profiling.Profiler.enableBinaryLog);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enabled(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Profiling.Profiler.enabled);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_usedHeapSizeLong(IntPtr L)
	{
		try
		{
			LuaDLL.tolua_pushint64(L, UnityEngine.Profiling.Profiler.usedHeapSizeLong);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_logFile(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Profiling.Profiler.logFile = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableBinaryLog(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Profiling.Profiler.enableBinaryLog = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enabled(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Profiling.Profiler.enabled = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

