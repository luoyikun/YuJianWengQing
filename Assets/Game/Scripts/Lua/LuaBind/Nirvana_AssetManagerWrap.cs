//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Nirvana_AssetManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("AssetManager");
		L.RegFunction("ClearCache", ClearCache);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("LoadVersion", LoadVersion);
		L.RegFunction("SaveVersion", SaveVersion);
		L.RegFunction("LoadLocalManifest", LoadLocalManifest);
		L.RegFunction("LoadRemoteManifest", LoadRemoteManifest);
		L.RegFunction("ExistedInStreaming", ExistedInStreaming);
		L.RegFunction("IsVersionCached", IsVersionCached);
		L.RegFunction("LoadFileInfo", LoadFileInfo);
		L.RegFunction("UpdateBundle", UpdateBundle);
		L.RegFunction("LoadBundleLocal", LoadBundleLocal);
		L.RegFunction("LoadObjectLocal", LoadObjectLocal);
		L.RegFunction("LoadObject", LoadObject);
		L.RegFunction("LoadObjectSync", LoadObjectSync);
		L.RegFunction("LoadLevel", LoadLevel);
		L.RegFunction("LoadLevelSync", LoadLevelSync);
		L.RegFunction("GetAssetsNamesInBundle", GetAssetsNamesInBundle);
		L.RegFunction("GetDependBundles", GetDependBundles);
		L.RegFunction("GetBundlesWithoutCached", GetBundlesWithoutCached);
		L.RegFunction("UnloadAsseBundle", UnloadAsseBundle);
		L.RegFunction("UnloadAllUnUsedAssetBundle", UnloadAllUnUsedAssetBundle);
		L.RegVar("CachePath", get_CachePath, null);
		L.RegVar("DownloadingURL", get_DownloadingURL, set_DownloadingURL);
		L.RegVar("AssetVersion", get_AssetVersion, set_AssetVersion);
		L.RegVar("IgnoreHashCheck", get_IgnoreHashCheck, set_IgnoreHashCheck);
		L.RegVar("ActiveVariants", get_ActiveVariants, set_ActiveVariants);
		L.RegVar("Manifest", get_Manifest, null);
		L.RegVar("HasManifest", get_HasManifest, null);
		L.RegVar("DownloadStartEvent", get_DownloadStartEvent, set_DownloadStartEvent);
		L.RegVar("DownloadFinishEvent", get_DownloadFinishEvent, set_DownloadFinishEvent);
		L.RegFunction("UpdateDelegate", Nirvana_AssetManager_UpdateDelegate);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearCache(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Nirvana.AssetManager.ClearCache();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Collections.IEnumerator o = Nirvana.AssetManager.Dispose();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = Nirvana.AssetManager.LoadVersion();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Nirvana.AssetManager.SaveVersion(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadLocalManifest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Nirvana.WaitLoadAsset o = Nirvana.AssetManager.LoadLocalManifest(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadRemoteManifest(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Nirvana.WaitLoadAsset o = Nirvana.AssetManager.LoadRemoteManifest(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Action<string> arg1 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 2);
				Nirvana.AssetManager.LoadRemoteManifest(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.AssetManager.LoadRemoteManifest");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExistedInStreaming(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = Nirvana.AssetManager.ExistedInStreaming(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsVersionCached(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool o = Nirvana.AssetManager.IsVersionCached(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Hash128 arg1 = StackTraits<UnityEngine.Hash128>.Check(L, 2);
				bool o = Nirvana.AssetManager.IsVersionCached(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.AssetManager.IsVersionCached");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadFileInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Nirvana.WaitLoadFileInfo o = Nirvana.AssetManager.LoadFileInfo();
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 1)
			{
				System.Action<string,Nirvana.AssetBundleFileInfo> arg0 = (System.Action<string,Nirvana.AssetBundleFileInfo>)ToLua.CheckDelegate<System.Action<string,Nirvana.AssetBundleFileInfo>>(L, 1);
				Nirvana.AssetManager.LoadFileInfo(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.AssetManager.LoadFileInfo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateBundle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Nirvana.WaitUpdateAssetBundle o = Nirvana.AssetManager.UpdateBundle(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Hash128 arg1 = StackTraits<UnityEngine.Hash128>.Check(L, 2);
				Nirvana.WaitUpdateAssetBundle o = Nirvana.AssetManager.UpdateBundle(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Nirvana.AssetManager.UpdateDelegate arg1 = (Nirvana.AssetManager.UpdateDelegate)ToLua.CheckDelegate<Nirvana.AssetManager.UpdateDelegate>(L, 2);
				System.Action<string> arg2 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 3);
				Nirvana.AssetManager.UpdateBundle(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Hash128 arg1 = StackTraits<UnityEngine.Hash128>.Check(L, 2);
				Nirvana.AssetManager.UpdateDelegate arg2 = (Nirvana.AssetManager.UpdateDelegate)ToLua.CheckDelegate<Nirvana.AssetManager.UpdateDelegate>(L, 3);
				System.Action<string> arg3 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 4);
				Nirvana.AssetManager.UpdateBundle(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.AssetManager.UpdateBundle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadBundleLocal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.AssetBundle o = Nirvana.AssetManager.LoadBundleLocal(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadObjectLocal(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.Check(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				UnityEngine.Object o = Nirvana.AssetManager.LoadObjectLocal(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				UnityEngine.Object o = Nirvana.AssetManager.LoadObjectLocal(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.AssetManager.LoadObjectLocal");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.Check(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				Nirvana.WaitLoadObject o = Nirvana.AssetManager.LoadObject(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<Nirvana.AssetID, System.Type, System.Action<UnityEngine.Object>>(L, 1))
			{
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.To(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Action<UnityEngine.Object> arg2 = (System.Action<UnityEngine.Object>)ToLua.ToObject(L, 3);
				Nirvana.AssetManager.LoadObject(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string, System.Type>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Type arg2 = (System.Type)ToLua.ToObject(L, 3);
				Nirvana.WaitLoadObject o = Nirvana.AssetManager.LoadObject(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				System.Action<UnityEngine.Object> arg3 = (System.Action<UnityEngine.Object>)ToLua.CheckDelegate<System.Action<UnityEngine.Object>>(L, 4);
				Nirvana.AssetManager.LoadObject(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.AssetManager.LoadObject");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadObjectSync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.Check(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				Nirvana.WaitLoadObject o = Nirvana.AssetManager.LoadObjectSync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<Nirvana.AssetID, System.Type, System.Action<UnityEngine.Object>>(L, 1))
			{
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.To(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Action<UnityEngine.Object> arg2 = (System.Action<UnityEngine.Object>)ToLua.ToObject(L, 3);
				Nirvana.AssetManager.LoadObjectSync(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string, System.Type>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Type arg2 = (System.Type)ToLua.ToObject(L, 3);
				Nirvana.WaitLoadObject o = Nirvana.AssetManager.LoadObjectSync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				System.Action<UnityEngine.Object> arg3 = (System.Action<UnityEngine.Object>)ToLua.CheckDelegate<System.Action<UnityEngine.Object>>(L, 4);
				Nirvana.AssetManager.LoadObjectSync(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.AssetManager.LoadObjectSync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadLevel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.Check(L, 1);
				UnityEngine.SceneManagement.LoadSceneMode arg1 = (UnityEngine.SceneManagement.LoadSceneMode)ToLua.CheckObject(L, 2, typeof(UnityEngine.SceneManagement.LoadSceneMode));
				Nirvana.WaitLoadLevel o = Nirvana.AssetManager.LoadLevel(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<Nirvana.AssetID, UnityEngine.SceneManagement.LoadSceneMode, System.Action>(L, 1))
			{
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.To(L, 1);
				UnityEngine.SceneManagement.LoadSceneMode arg1 = (UnityEngine.SceneManagement.LoadSceneMode)ToLua.ToObject(L, 2);
				System.Action arg2 = (System.Action)ToLua.ToObject(L, 3);
				Nirvana.AssetManager.LoadLevel(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string, UnityEngine.SceneManagement.LoadSceneMode>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.SceneManagement.LoadSceneMode arg2 = (UnityEngine.SceneManagement.LoadSceneMode)ToLua.ToObject(L, 3);
				Nirvana.WaitLoadLevel o = Nirvana.AssetManager.LoadLevel(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.SceneManagement.LoadSceneMode arg2 = (UnityEngine.SceneManagement.LoadSceneMode)ToLua.CheckObject(L, 3, typeof(UnityEngine.SceneManagement.LoadSceneMode));
				System.Action arg3 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				Nirvana.AssetManager.LoadLevel(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.SceneManagement.LoadSceneMode arg2 = (UnityEngine.SceneManagement.LoadSceneMode)ToLua.CheckObject(L, 3, typeof(UnityEngine.SceneManagement.LoadSceneMode));
				System.Action arg3 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				System.Action<float> arg4 = (System.Action<float>)ToLua.CheckDelegate<System.Action<float>>(L, 5);
				Nirvana.AssetManager.LoadLevel(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.AssetManager.LoadLevel");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadLevelSync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.Check(L, 1);
				UnityEngine.SceneManagement.LoadSceneMode arg1 = (UnityEngine.SceneManagement.LoadSceneMode)ToLua.CheckObject(L, 2, typeof(UnityEngine.SceneManagement.LoadSceneMode));
				Nirvana.WaitLoadLevel o = Nirvana.AssetManager.LoadLevelSync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<Nirvana.AssetID, UnityEngine.SceneManagement.LoadSceneMode, System.Action>(L, 1))
			{
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.To(L, 1);
				UnityEngine.SceneManagement.LoadSceneMode arg1 = (UnityEngine.SceneManagement.LoadSceneMode)ToLua.ToObject(L, 2);
				System.Action arg2 = (System.Action)ToLua.ToObject(L, 3);
				Nirvana.AssetManager.LoadLevelSync(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string, UnityEngine.SceneManagement.LoadSceneMode>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.SceneManagement.LoadSceneMode arg2 = (UnityEngine.SceneManagement.LoadSceneMode)ToLua.ToObject(L, 3);
				Nirvana.WaitLoadLevel o = Nirvana.AssetManager.LoadLevelSync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.SceneManagement.LoadSceneMode arg2 = (UnityEngine.SceneManagement.LoadSceneMode)ToLua.CheckObject(L, 3, typeof(UnityEngine.SceneManagement.LoadSceneMode));
				System.Action arg3 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				Nirvana.AssetManager.LoadLevelSync(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.AssetManager.LoadLevelSync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAssetsNamesInBundle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string[] o = Nirvana.AssetManager.GetAssetsNamesInBundle(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				string[] o = Nirvana.AssetManager.GetAssetsNamesInBundle(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.AssetManager.GetAssetsNamesInBundle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDependBundles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string[] o = Nirvana.AssetManager.GetDependBundles(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBundlesWithoutCached(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string[] o = Nirvana.AssetManager.GetBundlesWithoutCached(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAsseBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = Nirvana.AssetManager.UnloadAsseBundle(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAllUnUsedAssetBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Nirvana.AssetManager.UnloadAllUnUsedAssetBundle();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CachePath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Nirvana.AssetManager.CachePath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DownloadingURL(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Nirvana.AssetManager.DownloadingURL);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetVersion(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Nirvana.AssetManager.AssetVersion);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IgnoreHashCheck(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, Nirvana.AssetManager.IgnoreHashCheck);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ActiveVariants(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Nirvana.AssetManager.ActiveVariants);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Manifest(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, Nirvana.AssetManager.Manifest);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HasManifest(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, Nirvana.AssetManager.HasManifest);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DownloadStartEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<string>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DownloadFinishEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<string>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DownloadingURL(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			Nirvana.AssetManager.DownloadingURL = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AssetVersion(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			Nirvana.AssetManager.AssetVersion = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IgnoreHashCheck(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			Nirvana.AssetManager.IgnoreHashCheck = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ActiveVariants(IntPtr L)
	{
		try
		{
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			Nirvana.AssetManager.ActiveVariants = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DownloadStartEvent(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Nirvana.AssetManager.DownloadStartEvent' can only appear on the left hand side of += or -= when used outside of the type 'Nirvana.AssetManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<string> ev = (System.Action<string>)arg0.func;
				Nirvana.AssetManager.DownloadStartEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<string> ev = (System.Action<string>)arg0.func;
				Nirvana.AssetManager.DownloadStartEvent -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DownloadFinishEvent(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Nirvana.AssetManager.DownloadFinishEvent' can only appear on the left hand side of += or -= when used outside of the type 'Nirvana.AssetManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<string> ev = (System.Action<string>)arg0.func;
				Nirvana.AssetManager.DownloadFinishEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<string> ev = (System.Action<string>)arg0.func;
				Nirvana.AssetManager.DownloadFinishEvent -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Nirvana_AssetManager_UpdateDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Nirvana.AssetManager.UpdateDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Nirvana.AssetManager.UpdateDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

