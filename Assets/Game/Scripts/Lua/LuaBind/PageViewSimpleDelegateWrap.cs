//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PageViewSimpleDelegateWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PageViewSimpleDelegate), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("NumberOfCellsDel", get_NumberOfCellsDel, set_NumberOfCellsDel);
		L.RegVar("CellRefreshDel", get_CellRefreshDel, set_CellRefreshDel);
		L.RegFunction("CellRefreshDelegate", PageViewSimpleDelegate_CellRefreshDelegate);
		L.RegFunction("NumberOfCellsDelegate", PageViewSimpleDelegate_NumberOfCellsDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NumberOfCellsDel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PageViewSimpleDelegate obj = (PageViewSimpleDelegate)o;
			PageViewSimpleDelegate.NumberOfCellsDelegate ret = obj.NumberOfCellsDel;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NumberOfCellsDel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CellRefreshDel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PageViewSimpleDelegate obj = (PageViewSimpleDelegate)o;
			PageViewSimpleDelegate.CellRefreshDelegate ret = obj.CellRefreshDel;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CellRefreshDel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NumberOfCellsDel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PageViewSimpleDelegate obj = (PageViewSimpleDelegate)o;
			PageViewSimpleDelegate.NumberOfCellsDelegate arg0 = (PageViewSimpleDelegate.NumberOfCellsDelegate)ToLua.CheckDelegate<PageViewSimpleDelegate.NumberOfCellsDelegate>(L, 2);
			obj.NumberOfCellsDel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NumberOfCellsDel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CellRefreshDel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PageViewSimpleDelegate obj = (PageViewSimpleDelegate)o;
			PageViewSimpleDelegate.CellRefreshDelegate arg0 = (PageViewSimpleDelegate.CellRefreshDelegate)ToLua.CheckDelegate<PageViewSimpleDelegate.CellRefreshDelegate>(L, 2);
			obj.CellRefreshDel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CellRefreshDel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PageViewSimpleDelegate_CellRefreshDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<PageViewSimpleDelegate.CellRefreshDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<PageViewSimpleDelegate.CellRefreshDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PageViewSimpleDelegate_NumberOfCellsDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<PageViewSimpleDelegate.NumberOfCellsDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<PageViewSimpleDelegate.NumberOfCellsDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

