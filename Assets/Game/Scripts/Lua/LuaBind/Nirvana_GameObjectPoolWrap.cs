//this source code was auto-generated by tolua#, do not modify it
using System;
using Nirvana;
using LuaInterface;

public class Nirvana_GameObjectPoolWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Nirvana.GameObjectPool), typeof(Nirvana.Singleton<Nirvana.GameObjectPool>));
		L.RegFunction("SpawnAsset", SpawnAsset);
		L.RegFunction("SpawnAssetWithQueue", SpawnAssetWithQueue);
		L.RegFunction("Spawn", Spawn);
		L.RegFunction("SetDefaultReleaseAfterFree", SetDefaultReleaseAfterFree);
		L.RegFunction("Free", Free);
		L.RegFunction("Clear", Clear);
		L.RegFunction("ClearAllUnused", ClearAllUnused);
		L.RegFunction("New", _CreateNirvana_GameObjectPool);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("DefaultReleaseAfterFree", get_DefaultReleaseAfterFree, set_DefaultReleaseAfterFree);
		L.RegVar("DefaultInstancePoolCount", get_DefaultInstancePoolCount, set_DefaultInstancePoolCount);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNirvana_GameObjectPool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Nirvana.GameObjectPool obj = new Nirvana.GameObjectPool();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Nirvana.GameObjectPool.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SpawnAsset(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)ToLua.CheckObject(L, 1, typeof(Nirvana.GameObjectPool));
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.Check(L, 2);
				Nirvana.WaitSpawnGameObject o = obj.SpawnAsset(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<Nirvana.AssetID, System.Action<UnityEngine.GameObject>>(L, 2))
			{
				Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)ToLua.CheckObject(L, 1, typeof(Nirvana.GameObjectPool));
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.To(L, 2);
				System.Action<UnityEngine.GameObject> arg1 = (System.Action<UnityEngine.GameObject>)ToLua.ToObject(L, 3);
				obj.SpawnAsset(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string>(L, 2))
			{
				Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)ToLua.CheckObject(L, 1, typeof(Nirvana.GameObjectPool));
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				Nirvana.WaitSpawnGameObject o = obj.SpawnAsset(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 4)
			{
				Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)ToLua.CheckObject(L, 1, typeof(Nirvana.GameObjectPool));
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Action<UnityEngine.GameObject> arg2 = (System.Action<UnityEngine.GameObject>)ToLua.CheckDelegate<System.Action<UnityEngine.GameObject>>(L, 4);
				obj.SpawnAsset(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.GameObjectPool.SpawnAsset");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SpawnAssetWithQueue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)ToLua.CheckObject(L, 1, typeof(Nirvana.GameObjectPool));
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.Check(L, 2);
				Nirvana.InstantiateQueue arg1 = (Nirvana.InstantiateQueue)ToLua.CheckObject(L, 3, typeof(Nirvana.InstantiateQueue));
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				Nirvana.WaitSpawnGameObject o = obj.SpawnAssetWithQueue(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<Nirvana.AssetID, Nirvana.InstantiateQueue, int, System.Action<UnityEngine.GameObject>>(L, 2))
			{
				Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)ToLua.CheckObject(L, 1, typeof(Nirvana.GameObjectPool));
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.To(L, 2);
				Nirvana.InstantiateQueue arg1 = (Nirvana.InstantiateQueue)ToLua.ToObject(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				System.Action<UnityEngine.GameObject> arg3 = (System.Action<UnityEngine.GameObject>)ToLua.ToObject(L, 5);
				obj.SpawnAssetWithQueue(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<string, string, Nirvana.InstantiateQueue, int>(L, 2))
			{
				Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)ToLua.CheckObject(L, 1, typeof(Nirvana.GameObjectPool));
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				Nirvana.InstantiateQueue arg2 = (Nirvana.InstantiateQueue)ToLua.ToObject(L, 4);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 5);
				Nirvana.WaitSpawnGameObject o = obj.SpawnAssetWithQueue(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 6)
			{
				Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)ToLua.CheckObject(L, 1, typeof(Nirvana.GameObjectPool));
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				Nirvana.InstantiateQueue arg2 = (Nirvana.InstantiateQueue)ToLua.CheckObject(L, 4, typeof(Nirvana.InstantiateQueue));
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				System.Action<UnityEngine.GameObject> arg4 = (System.Action<UnityEngine.GameObject>)ToLua.CheckDelegate<System.Action<UnityEngine.GameObject>>(L, 6);
				obj.SpawnAssetWithQueue(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.GameObjectPool.SpawnAssetWithQueue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Spawn(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Component, UnityEngine.Transform>(L, 2))
			{
				Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)ToLua.CheckObject(L, 1, typeof(Nirvana.GameObjectPool));
				UnityEngine.Component arg0 = (UnityEngine.Component)ToLua.ToObject(L, 2);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 3);
				UnityEngine.Component o = obj.Spawn(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.GameObject, UnityEngine.Transform>(L, 2))
			{
				Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)ToLua.CheckObject(L, 1, typeof(Nirvana.GameObjectPool));
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 3);
				UnityEngine.GameObject o = obj.Spawn(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.GameObjectPool.Spawn");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDefaultReleaseAfterFree(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)ToLua.CheckObject(L, 1, typeof(Nirvana.GameObjectPool));
			Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.Check(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SetDefaultReleaseAfterFree(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Free(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)ToLua.CheckObject(L, 1, typeof(Nirvana.GameObjectPool));
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				obj.Free(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)ToLua.CheckObject(L, 1, typeof(Nirvana.GameObjectPool));
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.Free(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.GameObjectPool.Free");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)ToLua.CheckObject(L, 1, typeof(Nirvana.GameObjectPool));
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAllUnused(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)ToLua.CheckObject(L, 1, typeof(Nirvana.GameObjectPool));
			obj.ClearAllUnused();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultReleaseAfterFree(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)o;
			float ret = obj.DefaultReleaseAfterFree;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DefaultReleaseAfterFree on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultInstancePoolCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)o;
			int ret = obj.DefaultInstancePoolCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DefaultInstancePoolCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DefaultReleaseAfterFree(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.DefaultReleaseAfterFree = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DefaultReleaseAfterFree on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DefaultInstancePoolCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nirvana.GameObjectPool obj = (Nirvana.GameObjectPool)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.DefaultInstancePoolCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DefaultInstancePoolCount on a nil value");
		}
	}
}

