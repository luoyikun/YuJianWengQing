//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CGControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CGController), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("AddActor", AddActor);
		L.RegFunction("SetTrackMute", SetTrackMute);
		L.RegFunction("SetPlayEndCallback", SetPlayEndCallback);
		L.RegFunction("Play", Play);
		L.RegFunction("Stop", Stop);
		L.RegFunction("Skip", Skip);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddActor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CGController obj = (CGController)ToLua.CheckObject(L, 1, typeof(CGController));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.AddActor(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTrackMute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CGController obj = (CGController)ToLua.CheckObject(L, 1, typeof(CGController));
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetTrackMute(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPlayEndCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				CGController obj = (CGController)ToLua.CheckObject(L, 1, typeof(CGController));
				obj.SetPlayEndCallback();
				return 0;
			}
			else if (count == 2)
			{
				CGController obj = (CGController)ToLua.CheckObject(L, 1, typeof(CGController));
				System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
				obj.SetPlayEndCallback(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CGController.SetPlayEndCallback");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CGController obj = (CGController)ToLua.CheckObject(L, 1, typeof(CGController));
			obj.Play();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CGController obj = (CGController)ToLua.CheckObject(L, 1, typeof(CGController));
			obj.Stop();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Skip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CGController obj = (CGController)ToLua.CheckObject(L, 1, typeof(CGController));
			obj.Skip();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

