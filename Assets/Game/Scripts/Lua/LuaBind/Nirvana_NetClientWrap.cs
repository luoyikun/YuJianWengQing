//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Nirvana_NetClientWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Nirvana.NetClient), typeof(System.Object));
		L.RegFunction("Connect", Connect);
		L.RegFunction("Disconnect", Disconnect);
		L.RegFunction("SetKeepAlive", SetKeepAlive);
		L.RegFunction("SendMsg", SendMsg);
		L.RegFunction("StartReceive", StartReceive);
		L.RegFunction("EncryptMsg", EncryptMsg);
		L.RegFunction("DecryptMsg", DecryptMsg);
		L.RegFunction("TrySendEncryptMsg", TrySendEncryptMsg);
		L.RegFunction("ClearEncryptKey", ClearEncryptKey);
		L.RegFunction("TrySendEncryptKeyToServer", TrySendEncryptKeyToServer);
		L.RegFunction("SetIsNeedEncryptMsg", SetIsNeedEncryptMsg);
		L.RegFunction("UnlistenDisconnect", UnlistenDisconnect);
		L.RegFunction("ListenDisconnect", ListenDisconnect);
		L.RegFunction("UnlistenMessage", UnlistenMessage);
		L.RegFunction("ListenMessage", ListenMessage);
		L.RegFunction("New", _CreateNirvana_NetClient);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ReceiveTimeout", get_ReceiveTimeout, set_ReceiveTimeout);
		L.RegVar("SendTimeout", get_SendTimeout, set_SendTimeout);
		L.RegVar("DisconnectEvent", get_DisconnectEvent, set_DisconnectEvent);
		L.RegVar("ReceiveEvent", get_ReceiveEvent, set_ReceiveEvent);
		L.RegFunction("ConnectDelegate", Nirvana_NetClient_ConnectDelegate);
		L.RegFunction("SendDelegate", Nirvana_NetClient_SendDelegate);
		L.RegFunction("ReceiveDelegate", Nirvana_NetClient_ReceiveDelegate);
		L.RegFunction("DisconnectDelegate", Nirvana_NetClient_DisconnectDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNirvana_NetClient(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Nirvana.NetClient obj = new Nirvana.NetClient();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Nirvana.NetClient.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.Connect(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				Nirvana.NetClient.ConnectDelegate arg2 = (Nirvana.NetClient.ConnectDelegate)ToLua.CheckDelegate<Nirvana.NetClient.ConnectDelegate>(L, 4);
				obj.Connect(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.NetClient.Connect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Disconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
			obj.Disconnect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetKeepAlive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			uint arg2 = (uint)LuaDLL.luaL_checknumber(L, 4);
			obj.SetKeepAlive(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMsg(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.SendMsg(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				Nirvana.NetClient.SendDelegate arg1 = (Nirvana.NetClient.SendDelegate)ToLua.CheckDelegate<Nirvana.NetClient.SendDelegate>(L, 3);
				obj.SendMsg(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.NetClient.SendMsg");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartReceive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
			obj.StartReceive();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EncryptMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.EncryptMsg(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DecryptMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.DecryptMsg(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TrySendEncryptMsg(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.TrySendEncryptMsg(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				Nirvana.NetClient.SendDelegate arg1 = (Nirvana.NetClient.SendDelegate)ToLua.CheckDelegate<Nirvana.NetClient.SendDelegate>(L, 3);
				obj.TrySendEncryptMsg(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.NetClient.TrySendEncryptMsg");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearEncryptKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
			obj.ClearEncryptKey();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TrySendEncryptKeyToServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
			obj.TrySendEncryptKeyToServer();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIsNeedEncryptMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetIsNeedEncryptMsg(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnlistenDisconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
			Nirvana.NetClient.DisconnectDelegate arg0 = (Nirvana.NetClient.DisconnectDelegate)ToLua.CheckDelegate<Nirvana.NetClient.DisconnectDelegate>(L, 2);
			obj.UnlistenDisconnect(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ListenDisconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
			Nirvana.NetClient.DisconnectDelegate arg0 = (Nirvana.NetClient.DisconnectDelegate)ToLua.CheckDelegate<Nirvana.NetClient.DisconnectDelegate>(L, 2);
			Nirvana.NetClient.DisconnectDelegate o = obj.ListenDisconnect(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnlistenMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
			Nirvana.NetClient.ReceiveDelegate arg0 = (Nirvana.NetClient.ReceiveDelegate)ToLua.CheckDelegate<Nirvana.NetClient.ReceiveDelegate>(L, 2);
			obj.UnlistenMessage(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ListenMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
			NetClientExtensions.ReceiveMessageDelegate arg0 = (NetClientExtensions.ReceiveMessageDelegate)ToLua.CheckDelegate<NetClientExtensions.ReceiveMessageDelegate>(L, 2);
			Nirvana.NetClient.ReceiveDelegate o = obj.ListenMessage(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReceiveTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nirvana.NetClient obj = (Nirvana.NetClient)o;
			int ret = obj.ReceiveTimeout;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReceiveTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SendTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nirvana.NetClient obj = (Nirvana.NetClient)o;
			int ret = obj.SendTimeout;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DisconnectEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(Nirvana.NetClient.DisconnectDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReceiveEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(Nirvana.NetClient.ReceiveDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReceiveTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nirvana.NetClient obj = (Nirvana.NetClient)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ReceiveTimeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReceiveTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SendTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nirvana.NetClient obj = (Nirvana.NetClient)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SendTimeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DisconnectEvent(IntPtr L)
	{
		try
		{
			Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Nirvana.NetClient.DisconnectEvent' can only appear on the left hand side of += or -= when used outside of the type 'Nirvana.NetClient'");
			}

			if (arg0.op == EventOp.Add)
			{
				Nirvana.NetClient.DisconnectDelegate ev = (Nirvana.NetClient.DisconnectDelegate)arg0.func;
				obj.DisconnectEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				Nirvana.NetClient.DisconnectDelegate ev = (Nirvana.NetClient.DisconnectDelegate)arg0.func;
				obj.DisconnectEvent -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReceiveEvent(IntPtr L)
	{
		try
		{
			Nirvana.NetClient obj = (Nirvana.NetClient)ToLua.CheckObject(L, 1, typeof(Nirvana.NetClient));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Nirvana.NetClient.ReceiveEvent' can only appear on the left hand side of += or -= when used outside of the type 'Nirvana.NetClient'");
			}

			if (arg0.op == EventOp.Add)
			{
				Nirvana.NetClient.ReceiveDelegate ev = (Nirvana.NetClient.ReceiveDelegate)arg0.func;
				obj.ReceiveEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				Nirvana.NetClient.ReceiveDelegate ev = (Nirvana.NetClient.ReceiveDelegate)arg0.func;
				obj.ReceiveEvent -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Nirvana_NetClient_ConnectDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Nirvana.NetClient.ConnectDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Nirvana.NetClient.ConnectDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Nirvana_NetClient_SendDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Nirvana.NetClient.SendDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Nirvana.NetClient.SendDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Nirvana_NetClient_ReceiveDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Nirvana.NetClient.ReceiveDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Nirvana.NetClient.ReceiveDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Nirvana_NetClient_DisconnectDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Nirvana.NetClient.DisconnectDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Nirvana.NetClient.DisconnectDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

