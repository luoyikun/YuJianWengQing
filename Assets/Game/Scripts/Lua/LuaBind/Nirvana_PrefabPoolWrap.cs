//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Nirvana_PrefabPoolWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Nirvana.PrefabPool), typeof(Nirvana.Singleton<Nirvana.PrefabPool>));
		L.RegFunction("Instantiate", Instantiate);
		L.RegFunction("Retain", Retain);
		L.RegFunction("Free", Free);
		L.RegFunction("Clear", Clear);
		L.RegFunction("ClearAllUnused", ClearAllUnused);
		L.RegFunction("Load", Load);
		L.RegFunction("New", _CreateNirvana_PrefabPool);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("DefaultReleaseAfterFree", get_DefaultReleaseAfterFree, set_DefaultReleaseAfterFree);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNirvana_PrefabPool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Nirvana.PrefabPool obj = new Nirvana.PrefabPool();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Nirvana.PrefabPool.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Instantiate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nirvana.PrefabPool obj = (Nirvana.PrefabPool)ToLua.CheckObject(L, 1, typeof(Nirvana.PrefabPool));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			UnityEngine.GameObject o = obj.Instantiate(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Retain(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nirvana.PrefabPool obj = (Nirvana.PrefabPool)ToLua.CheckObject(L, 1, typeof(Nirvana.PrefabPool));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			bool o = obj.Retain(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Free(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Nirvana.PrefabPool obj = (Nirvana.PrefabPool)ToLua.CheckObject(L, 1, typeof(Nirvana.PrefabPool));
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				obj.Free(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Nirvana.PrefabPool obj = (Nirvana.PrefabPool)ToLua.CheckObject(L, 1, typeof(Nirvana.PrefabPool));
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.Free(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.PrefabPool.Free");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nirvana.PrefabPool obj = (Nirvana.PrefabPool)ToLua.CheckObject(L, 1, typeof(Nirvana.PrefabPool));
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAllUnused(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nirvana.PrefabPool obj = (Nirvana.PrefabPool)ToLua.CheckObject(L, 1, typeof(Nirvana.PrefabPool));
			obj.ClearAllUnused();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				Nirvana.PrefabPool obj = (Nirvana.PrefabPool)ToLua.CheckObject(L, 1, typeof(Nirvana.PrefabPool));
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.Check(L, 2);
				System.Action<UnityEngine.GameObject> arg1 = (System.Action<UnityEngine.GameObject>)ToLua.CheckDelegate<System.Action<UnityEngine.GameObject>>(L, 3);
				obj.Load(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Nirvana.PrefabPool obj = (Nirvana.PrefabPool)ToLua.CheckObject(L, 1, typeof(Nirvana.PrefabPool));
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.Check(L, 2);
				System.Action<UnityEngine.GameObject> arg1 = (System.Action<UnityEngine.GameObject>)ToLua.CheckDelegate<System.Action<UnityEngine.GameObject>>(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.Load(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.PrefabPool.Load");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultReleaseAfterFree(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nirvana.PrefabPool obj = (Nirvana.PrefabPool)o;
			float ret = obj.DefaultReleaseAfterFree;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DefaultReleaseAfterFree on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DefaultReleaseAfterFree(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nirvana.PrefabPool obj = (Nirvana.PrefabPool)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.DefaultReleaseAfterFree = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DefaultReleaseAfterFree on a nil value");
		}
	}
}

