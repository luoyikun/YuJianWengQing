//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Nirvana_AudioManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Nirvana.AudioManager), typeof(Nirvana.UnitySingleton<Nirvana.AudioManager>));
		L.RegFunction("Play", Play);
		L.RegFunction("PlayAndForget", PlayAndForget);
		L.RegFunction("StopAll", StopAll);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Nirvana.AudioItem arg0 = (Nirvana.AudioItem)ToLua.CheckObject(L, 1, typeof(Nirvana.AudioItem));
				Nirvana.IAudioPlayer o = Nirvana.AudioManager.Play(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Transform>(L, 2))
			{
				Nirvana.AudioItem arg0 = (Nirvana.AudioItem)ToLua.CheckObject(L, 1, typeof(Nirvana.AudioItem));
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				Nirvana.IAudioPlayer o = Nirvana.AudioManager.Play(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector3>(L, 2))
			{
				Nirvana.AudioItem arg0 = (Nirvana.AudioItem)ToLua.CheckObject(L, 1, typeof(Nirvana.AudioItem));
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				Nirvana.IAudioPlayer o = Nirvana.AudioManager.Play(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.AudioManager.Play");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayAndForget(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<Nirvana.AssetID>(L, 1))
			{
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.To(L, 1);
				Nirvana.AudioManager.PlayAndForget(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<Nirvana.AudioItem>(L, 1))
			{
				Nirvana.AudioItem arg0 = (Nirvana.AudioItem)ToLua.ToObject(L, 1);
				Nirvana.AudioManager.PlayAndForget(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Nirvana.AssetID, UnityEngine.Vector3>(L, 1))
			{
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.To(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				Nirvana.AudioManager.PlayAndForget(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Nirvana.AudioItem, UnityEngine.Transform>(L, 1))
			{
				Nirvana.AudioItem arg0 = (Nirvana.AudioItem)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				Nirvana.AudioManager.PlayAndForget(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Nirvana.AssetID, UnityEngine.Transform>(L, 1))
			{
				Nirvana.AssetID arg0 = StackTraits<Nirvana.AssetID>.To(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				Nirvana.AudioManager.PlayAndForget(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				Nirvana.AudioManager.PlayAndForget(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Nirvana.AudioItem, UnityEngine.Vector3>(L, 1))
			{
				Nirvana.AudioItem arg0 = (Nirvana.AudioItem)ToLua.ToObject(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				Nirvana.AudioManager.PlayAndForget(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Transform>(L, 3))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Transform arg2 = (UnityEngine.Transform)ToLua.ToObject(L, 3);
				Nirvana.AudioManager.PlayAndForget(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3>(L, 3))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				Nirvana.AudioManager.PlayAndForget(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nirvana.AudioManager.PlayAndForget");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Nirvana.AudioManager.StopAll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

