//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameRootWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameRoot), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Restart", Restart);
		L.RegFunction("PruneLuaBundles", PruneLuaBundles);
		L.RegFunction("SetBuglyUserID", SetBuglyUserID);
		L.RegFunction("SetBuglySceneID", SetBuglySceneID);
		L.RegFunction("LimitScreenResolution", LimitScreenResolution);
		L.RegFunction("IsLuaFileExist", IsLuaFileExist);
		L.RegFunction("GetAliasResPath", GetAliasResPath);
		L.RegFunction("UpdateLogEnable", UpdateLogEnable);
		L.RegFunction("ReduceMemory", ReduceMemory);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Restart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameRoot obj = (GameRoot)ToLua.CheckObject(L, 1, typeof(GameRoot));
			obj.Restart();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PruneLuaBundles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameRoot obj = (GameRoot)ToLua.CheckObject(L, 1, typeof(GameRoot));
			obj.PruneLuaBundles();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBuglyUserID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameRoot obj = (GameRoot)ToLua.CheckObject(L, 1, typeof(GameRoot));
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetBuglyUserID(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBuglySceneID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameRoot obj = (GameRoot)ToLua.CheckObject(L, 1, typeof(GameRoot));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetBuglySceneID(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LimitScreenResolution(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameRoot obj = (GameRoot)ToLua.CheckObject(L, 1, typeof(GameRoot));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.LimitScreenResolution(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsLuaFileExist(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = GameRoot.IsLuaFileExist(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAliasResPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = GameRoot.GetAliasResPath(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateLogEnable(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				GameRoot obj = (GameRoot)ToLua.CheckObject(L, 1, typeof(GameRoot));
				obj.UpdateLogEnable();
				return 0;
			}
			else if (count == 2)
			{
				GameRoot obj = (GameRoot)ToLua.CheckObject(L, 1, typeof(GameRoot));
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.UpdateLogEnable(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameRoot.UpdateLogEnable");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReduceMemory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameRoot obj = (GameRoot)ToLua.CheckObject(L, 1, typeof(GameRoot));
			obj.ReduceMemory();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, GameRoot.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

